{"version":3,"sources":["webpack:///./node_modules/@vant/touch-emulator/index.js"],"names":["eventTarget","supportTouch","window","document","createTouch","view","target","identifier","pageX","pageY","screenX","screenY","Touch","clientX","pageXOffset","clientY","pageYOffset","createTouchList","touchList","TouchList","i","arguments","length","pos","deltaX","deltaY","this","index","id","initiated","onMouse","touchType","ev","type","dispatchEvent","triggerTouch","eventName","mouseEv","touchEvent","createEvent","initEvent","altKey","ctrlKey","metaKey","shiftKey","touches","getActiveTouches","targetTouches","changedTouches","push","TouchEmulator","addEventListener"],"mappings":";iGAMA,IAAIA,EACAC,EAAe,iBAAkBC,OAGhCC,SAASC,cACZD,SAASC,YAAc,SAASC,EAAMC,EAAQC,EAAYC,EAAOC,EAAOC,EAASC,GAE/E,OAAO,IAAIC,EAAMN,EAAQC,EAAY,CACnCC,MAAOA,EACPC,MAAOA,EACPC,QAASA,EACTC,QAASA,EACTE,QAASL,EAAQN,OAAOY,YACxBC,QAASN,EAAQP,OAAOc,aACvB,EAAG,KAILb,SAASc,kBACZd,SAASc,gBAAkB,WAEzB,IADA,IAAIC,EAAYC,IACPC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IACpCF,EAAUE,GAAKC,UAAUD,GAG3B,OADAF,EAAUI,OAASD,UAAUC,OACtBJ,IAeX,IAAIN,EAAQ,SAAeN,EAAQC,EAAYgB,EAAKC,EAAQC,GAC1DD,EAASA,GAAU,EACnBC,EAASA,GAAU,EAEnBC,KAAKnB,WAAaA,EAClBmB,KAAKpB,OAASA,EACdoB,KAAKb,QAAUU,EAAIV,QAAUW,EAC7BE,KAAKX,QAAUQ,EAAIR,QAAUU,EAC7BC,KAAKhB,QAAUa,EAAIb,QAAUc,EAC7BE,KAAKf,QAAUY,EAAIZ,QAAUc,EAC7BC,KAAKlB,MAAQe,EAAIf,MAAQgB,EACzBE,KAAKjB,MAAQc,EAAId,MAAQgB,GAQ3B,SAASN,IACP,IAAID,EAAY,GAWhB,OATAA,EAAU,QAAU,SAASS,GAC3B,OAAOD,KAAKC,IAAU,MAIxBT,EAAU,mBAAqB,SAASU,GACtC,OAAOF,KAAKE,EAAK,IAAM,MAGlBV,EAYT,IAAIW,GAAY,EAChB,SAASC,EAAQC,GACf,OAAO,SAASC,GAGE,cAAZA,EAAGC,OACLJ,GAAY,GAGE,YAAZG,EAAGC,OACLJ,GAAY,IAGE,cAAZG,EAAGC,MAAyBJ,MAOhB,cAAZG,EAAGC,OAAyBjC,GAAeA,IAAgBA,EAAYkC,iBACzElC,EAAcgC,EAAG1B,QAGnB6B,EAAaJ,EAAWC,GAGR,YAAZA,EAAGC,OACLjC,EAAc,QAUpB,SAASmC,EAAaC,EAAWC,GAC/B,IAAIC,EAAanC,SAASoC,YAAY,SACtCD,EAAWE,UAAUJ,GAAW,GAAM,GAEtCE,EAAWG,OAASJ,EAAQI,OAC5BH,EAAWI,QAAUL,EAAQK,QAC7BJ,EAAWK,QAAUN,EAAQM,QAC7BL,EAAWM,SAAWP,EAAQO,SAE9BN,EAAWO,QAAUC,EAAiBT,GACtCC,EAAWS,cAAgBD,EAAiBT,GAC5CC,EAAWU,eAAiB/B,EAAgBoB,GAE5CrC,EAAYkC,cAAcI,GAQ5B,SAASrB,EAAgBoB,GACvB,IAAInB,EAAYC,IAEhB,OADAD,EAAU+B,KAAK,IAAIrC,EAAMZ,EAAa,EAAGqC,EAAS,EAAG,IAC9CnB,EAQT,SAAS4B,EAAiBT,GAExB,MAAqB,YAAjBA,EAAQJ,KACHd,IAEFF,EAAgBoB,GAMzB,SAASa,IACPhD,OAAOiD,iBAAiB,YAAarB,EAAQ,eAAe,GAC5D5B,OAAOiD,iBAAiB,YAAarB,EAAQ,cAAc,GAC3D5B,OAAOiD,iBAAiB,UAAWrB,EAAQ,aAAa,GAI1DoB,EAAc,oBAAsB,GAE/BjD,GACH,IAAIiD","file":"static/js/touch-emulator.js","sourcesContent":["/* eslint-disable */\n/**\n * Emulate touch event\n * Sourceï¼šhttps://github.com/hammerjs/touchemulator\n */\n\nvar eventTarget;\nvar supportTouch = 'ontouchstart' in window;\n\n// polyfills\nif (!document.createTouch) {\n  document.createTouch = function(view, target, identifier, pageX, pageY, screenX, screenY) {\n    // auto set\n    return new Touch(target, identifier, {\n      pageX: pageX,\n      pageY: pageY,\n      screenX: screenX,\n      screenY: screenY,\n      clientX: pageX - window.pageXOffset,\n      clientY: pageY - window.pageYOffset\n    }, 0, 0);\n  };\n}\n\nif (!document.createTouchList) {\n  document.createTouchList = function() {\n    var touchList = TouchList();\n    for (var i = 0; i < arguments.length; i++) {\n      touchList[i] = arguments[i];\n    }\n    touchList.length = arguments.length;\n    return touchList;\n  };\n}\n\n/**\n * create an touch point\n * @constructor\n * @param target\n * @param identifier\n * @param pos\n * @param deltaX\n * @param deltaY\n * @returns {Object} touchPoint\n */\n\nvar Touch = function Touch(target, identifier, pos, deltaX, deltaY) {\n  deltaX = deltaX || 0;\n  deltaY = deltaY || 0;\n\n  this.identifier = identifier;\n  this.target = target;\n  this.clientX = pos.clientX + deltaX;\n  this.clientY = pos.clientY + deltaY;\n  this.screenX = pos.screenX + deltaX;\n  this.screenY = pos.screenY + deltaY;\n  this.pageX = pos.pageX + deltaX;\n  this.pageY = pos.pageY + deltaY;\n};\n\n/**\n * create empty touchlist with the methods\n * @constructor\n * @returns touchList\n */\nfunction TouchList() {\n  var touchList = [];\n\n  touchList['item'] = function(index) {\n    return this[index] || null;\n  };\n\n  // specified by Mozilla\n  touchList['identifiedTouch'] = function(id) {\n    return this[id + 1] || null;\n  };\n\n  return touchList;\n}\n\n\n\n/**\n * only trigger touches when the left mousebutton has been pressed\n * @param touchType\n * @returns {Function}\n */\n\n \nvar initiated = false;\nfunction onMouse(touchType) {\n  return function(ev) {\n    // prevent mouse events\n\n    if (ev.type === 'mousedown') {\n      initiated = true;\n    }\n\n    if (ev.type === 'mouseup') {\n      initiated = false;\n    }\n\n    if (ev.type === 'mousemove' && !initiated) {\n      return\n    }\n\n    // The EventTarget on which the touch point started when it was first placed on the surface,\n    // even if the touch point has since moved outside the interactive area of that element.\n    // also, when the target doesnt exist anymore, we update it\n    if (ev.type === 'mousedown' || !eventTarget || eventTarget && !eventTarget.dispatchEvent) {\n      eventTarget = ev.target;\n    }\n\n    triggerTouch(touchType, ev);\n\n    // reset\n    if (ev.type === 'mouseup') {\n      eventTarget = null;\n    }\n  };\n}\n\n/**\n * trigger a touch event\n * @param eventName\n * @param mouseEv\n */\nfunction triggerTouch(eventName, mouseEv) {\n  var touchEvent = document.createEvent('Event');\n  touchEvent.initEvent(eventName, true, true);\n\n  touchEvent.altKey = mouseEv.altKey;\n  touchEvent.ctrlKey = mouseEv.ctrlKey;\n  touchEvent.metaKey = mouseEv.metaKey;\n  touchEvent.shiftKey = mouseEv.shiftKey;\n\n  touchEvent.touches = getActiveTouches(mouseEv);\n  touchEvent.targetTouches = getActiveTouches(mouseEv);\n  touchEvent.changedTouches = createTouchList(mouseEv);\n\n  eventTarget.dispatchEvent(touchEvent);\n}\n\n/**\n * create a touchList based on the mouse event\n * @param mouseEv\n * @returns {TouchList}\n */\nfunction createTouchList(mouseEv) {\n  var touchList = TouchList();\n  touchList.push(new Touch(eventTarget, 1, mouseEv, 0, 0));\n  return touchList;\n}\n\n/**\n * receive all active touches\n * @param mouseEv\n * @returns {TouchList}\n */\nfunction getActiveTouches(mouseEv) {\n  // empty list\n  if (mouseEv.type === 'mouseup') {\n    return TouchList();\n  }\n  return createTouchList(mouseEv);\n}\n\n/**\n * TouchEmulator initializer\n */\nfunction TouchEmulator() {\n  window.addEventListener('mousedown', onMouse('touchstart'), true);\n  window.addEventListener('mousemove', onMouse('touchmove'), true);\n  window.addEventListener('mouseup', onMouse('touchend'), true);\n}\n\n// start distance when entering the multitouch mode\nTouchEmulator['multiTouchOffset'] = 75;\n\nif (!supportTouch) {\n  new TouchEmulator();\n}\n"],"sourceRoot":""}